{"config":{"lang":["en"],"separator":"[\\s\\-\\.]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Documentation","text":"<p>Welcome to the scl-machine documentation! This comprehensive guide is designed to help you explore the features, functionalities, and applications of scl-machine, a C++ software package for logical inference within the OSTIS Technology.</p>"},{"location":"#what-is-scl-machine","title":"What is scl-machine?","text":"<p>scl-machine is a software package that provides logical reasoning and inference capabilities for systems designed with OSTIS Technology. It enables intelligent systems to process and reason about knowledge represented in SC-code and SCL (Semantic Code Logic).</p> <p>Table of contents:</p> <ul> <li>Quick Start - get up and running with scl-machine quickly</li> <li>Problem Solver - description of agents in scl-machine</li> <li>Build Instructions - guidelines for building the project, configuring settings<ul> <li>Quick Start for Contributors - get up and start developing scl-machine quickly</li> <li>Build System - how to build the project and use it as a library</li> <li>CMake Flags - description of CMake flags used to configure scl-machine</li> </ul> </li> <li>Development - guidelines for contributing to development<ul> <li>Contributing Guide - guide for those who wants to make contribution to scl-machine</li> <li>Codestyle Guide - guide for those who wants to write code for scl-machine</li> </ul> </li> <li>License</li> <li>Changelog</li> </ul>"},{"location":"CONTRIBUTING/","title":"Contributing Guide","text":"<p>This page describes rules to contribute changes and features by Pull Requests creating.</p>"},{"location":"CONTRIBUTING/#initialize","title":"Initialize","text":"<p>To initialize your repo do:</p> <ul> <li>Fork <code>https://github.com/ostis-ai/scl-machine</code>.</li> <li>Clone your fork to your machine and prepare (see Readme).</li> </ul> <pre><code>git clone git@github.com:yourlogin/scl-machine.git\ncd scl-machine\ngit remote add upstream git@github.com:ostis-ai/scl-machine.git\n</code></pre> <ul> <li>To update your <code>main</code> from <code>upstream</code> use:</li> </ul> <pre><code>git fetch upstream\ngit checkout upstream/main\n</code></pre> <ul> <li>Use <code>git rebase</code> instead of <code>merge</code>. See documentation about this command. To rebase your branch against main use:</li> </ul> <pre><code>git checkout &lt;yourbranch&gt;\ngit rebase upstream/main\n</code></pre> <ul> <li>If you have any problems, then redo:</li> </ul> <pre><code>git rebase --abort\n</code></pre> <ul> <li>Or ask in Element.</li> </ul>"},{"location":"CONTRIBUTING/#commits-message-format","title":"Commits message format","text":"<p>Each commit message should be formed as: <code>[tag1]...[tagN] Message text (#issue)</code>.</p> <p>Message text should start from an upper case letter. If commit doesn't fix or implement any #issue, then it shouldn't be pointed in commit message.</p> <p>Examples:</p> <pre>\n[doc] Add documentation for direct inference agent\n[dia][test] Add unit tests\n</pre> <p>Possible tags:</p> <ul> <li><code>[solver]</code> - changes in <code>problem-solver</code> folder;</li> <li><code>[dia]</code> - changes in direct inference agent;</li> <li><code>[expr]</code> - changes in logical expressions (proposition connectives);</li> <li><code>[template]</code> - changes in template manager;</li> <li><code>[solution]</code> - changes in solution processing;</li> <li><code>[replacements]</code> - changes in replacements processing;</li> <li><code>[tests]</code> or <code>[test]</code> - changes in tests;</li> <li><code>[review]</code> - commits with review fixes;</li> <li><code>[refactor]</code> - commits with some code refactoring;</li> <li><code>[changelog]</code> - use when you update changelog;</li> <li><code>[docs]</code> or <code>[doc]</code> - use when you update documentation;</li> <li><code>[config]</code> - commits with changes in configuration;</li> <li><code>[ci]</code> - changes in <code>ci</code> configuration or scripts;</li> <li><code>[git]</code> - changes in <code>git</code> configuration;</li> <li><code>[cmake]</code> - changes in cmake files;</li> <li><code>[build]</code> - updates in build system;</li> <li><code>[scripts]</code> - updates in the <code>scl-machine/scripts</code> files;</li> <li><code>[kb]</code> - changes in knowledge base.</li> </ul> <p>Each commit in Pull Request should be an atomic. In other words, it should implement or fix one feature. For example:</p> <pre>\nLast commit\n...\n[refactor][dia] Format dia according to clang format\n[ci] Add clang format file\n...\nInit commit\n</pre> <p>Each commit should have not much differences excluding cases, with:</p> <ul> <li>CodeStyle changes; </li> <li>Renames; </li> <li>Code formatting.</li> </ul> <p>Do atomic commits for each changes. For example if you rename some members in <code>ClassX</code> and <code>ClassY</code>, then do two commits:</p> <pre>\n[refactor] Rename members in ClassX according to codestyle\n[refactor] Rename members in ClassY according to codestyle\n</pre> <p>Do not mix codestyle changes and any logical fixes in one commit.</p> <p>All commits that not follow these rules should be split according to these rules. Otherwise they will be rejected with Pull Request.</p>"},{"location":"CONTRIBUTING/#pull-request","title":"Pull Request","text":"<p>Each Pull Request with many changes, that not possible to review (excluding codestyle, rename changes), will be rejected.</p>"},{"location":"CONTRIBUTING/#pull-request-preparation","title":"Pull Request Preparation","text":"<ul> <li>Read rules to create PR in documentation;</li> <li>Update changelog;</li> <li>Update documentation;</li> <li>Cover new functionality by tests;</li> <li>Your code should be written according to a codestyle like in sc-machine (see Codestyle rules).</li> </ul>"},{"location":"CONTRIBUTING/#pull-request-creation","title":"Pull Request creation","text":"<ul> <li>Create PR on GitHub;</li> <li>Check that CI checks were passed successfully.</li> </ul>"},{"location":"CONTRIBUTING/#pull-request-review","title":"Pull Request Review","text":"<ul> <li>Reviewer tests code from PR if CI doesn't do it;</li> <li>Reviewer submits review as set of conversations;</li> <li>Author makes review fixes at <code>Review fixes</code> commits;</li> <li>Author re-requests review;</li> <li>Reviewer resolves conversations and approves PR if conversations were fixed.</li> </ul>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#unreleased","title":"[Unreleased]","text":""},{"location":"changelog/#030-24022024","title":"[0.3.0] - 24.02.2024","text":""},{"location":"changelog/#breaking-changes","title":"Breaking changes","text":"<ul> <li>Direct inference agent's subscription element is changed to <code>action_initiated</code></li> <li>Build system is changed to build system used by sc-machine 0.10.0</li> <li>The names of the public methods were consistent with the names of the sc-machine methods</li> </ul>"},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>Deprecated sc-types are no longer in use</li> </ul>"},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>Upgrade build system to build system used by sc-machine 0.10.0</li> <li>TemplateSearcherOnlyAccessEdgesInStructures is renamed to TemplateSearcherOnlyMembershipArcsInStructures</li> </ul>"},{"location":"changelog/#removed","title":"Removed","text":"<ul> <li>Codegen for agents</li> </ul>"},{"location":"changelog/#v020","title":"[v0.2.0]","text":""},{"location":"changelog/#breaking-changes_1","title":"Breaking changes","text":"<ul> <li>Direct inference manager was removed. To create DirectInferenceManagerTarget use <code>InferenceManagerFactory::constructDirectInferenceManagerTarget</code> with config {GENERATE_ALL_FORMULAS, ALL, TREE_ONLY_OUTPUT_STRUCTURE}</li> </ul>"},{"location":"changelog/#added","title":"Added","text":"<ul> <li>InferenceConfig uses ScAddrUnorderedSet to store input structures</li> <li>Allow edges substitution from replacements in atomic logical formula search and generation</li> <li>Solution removal agent</li> <li>Template searcher abstract with new implementation: TemplateSearcherOnlyAccessEdgesInStructures</li> <li>Inference flow config to control generation unique formulas, only first formula and solution tree</li> <li>Solution tree manager abstract with new implementation: SolutionTreeManagerEmpty</li> <li>Template manager abstract with new implementation: TemplateManagerFixedArguments</li> <li>Template searcher abstract with new implementation: TemplateSearcherInStructures</li> <li>Inference config and factory to create inference manager</li> <li>Inference manager abstract with new implementation: InferenceManagerAll</li> <li>Finish agent work if exception occurred</li> <li>Unify interfaces with old 3-argument applying inference</li> <li>New tests for logic module with argument checking and with complex rules</li> <li>Add pre-commit</li> <li>Add clang format check</li> <li>Add opportunity to generate and search in structure for DirectInferenceAgent</li> <li>Add opportunity to only search and check formula, but not generate</li> <li>Add mechanism for substitution values into variables</li> <li>Documentation in scn-tex format</li> <li>README</li> <li>Changelog</li> <li>Add always generating for conclusion in implication</li> <li>Add arguments to sub formulas in conjunction and disjunction</li> <li>Add conjunction generation</li> <li>Add parameters to solution tree</li> </ul>"},{"location":"changelog/#fixed_1","title":"Fixed","text":"<ul> <li>Atomic logical formula generation with GENERATE_UNIQUE_FORMULAS mode</li> <li>Agent initiation in tests</li> <li>Clang formatter</li> <li>Fixed template params creating with no arguments</li> <li>Fixed applying rules chain</li> </ul>"},{"location":"changelog/#changed_1","title":"Changed","text":"<ul> <li>All questions are replaced with actions</li> <li>ScAddrHashSet is renamed to ScAddrUnorderedSet</li> <li>InferenceConfig is added to inference namespace</li> <li>Template search in structures checks if element is in structure instead of check if structure has element</li> <li>Logic formula generation results are passed as method arguments instead of return values</li> <li>Replacements results are passed as method arguments instead of return values</li> <li>Replacements union use hashes to improve performance</li> <li>Replacements operations use hashes to improve performance</li> <li>Replacements are now calculated for all variables in atomic logical formulas</li> <li>Replace DirectInferenceManager logic with configured InferenceManagerTarget</li> <li>Remove return logic expression result in LogicExpressionNode</li> <li>Separate manager and searcher files to the subdirectories</li> <li>Separate logical connectives classes</li> <li>Rename variables, log message concepts and methods according to the Standard concepts</li> <li>Separate tests for simple formulas, complex formulas and agent arguments</li> <li>Move to 0.7.0 ostis-web-platform</li> <li>Changed condition for applying generation(generate if this rule with this parameters wasn't applied yet)</li> </ul>"},{"location":"changelog/#removed_1","title":"Removed","text":"<ul> <li>Cache of input structures in TemplateSearcherInStructures</li> <li>Unused and duplicated keynodes</li> <li><code>check</code> method of LogicExpressionNode</li> <li>Unused and unimplemented agents</li> </ul>"},{"location":"changelog/#v010","title":"[v0.1.0]","text":"<ul> <li>Direct inference agent for implications</li> <li>Template generation agent</li> <li>Reverse inference agent for implications</li> </ul>"},{"location":"quick_start/","title":"Quick Start","text":"<p>Note</p> <p>The scl-machine can't be used on Windows.</p>"},{"location":"quick_start/#use-scl-machine-as-an-extension-to-sc-machine","title":"Use scl-machine as an extension to sc-machine","text":"<ol> <li> <p>Download pre-built artifacts of sc-machine from GitHub Releases and extract it to any location.</p> <p>To learn more about how to install and use sc-machine artifacts, see sc-machine quick start.</p> </li> <li> <p>Download pre-built artifacts of scl-machine from GitHub Releases and extract it to any location.</p> </li> <li> <p>Then specify the folder path to <code>lib/extensions</code> from extracted scl-machine folder when running the sc-machine binary:</p> <pre><code>./path/to/extracted/sc-machine/binary -s path/to/kb.bin \\\n    -e \"path/to/extracted/scl-machine/lib/extensions;path/to/extracted/sc-machine/lib/extensions\"\n# if several paths to extensions are provided then they should be separated \n# by semicolon and wrapped in double quotes\n</code></pre> </li> </ol>"},{"location":"quick_start/#use-scl-machine-as-a-c-library-in-your-project","title":"Use scl-machine as a C++ library in your project","text":""},{"location":"quick_start/#conan","title":"Conan","text":"<p>You can use Conan to install scl-machine. To integrate scl-machine into your project using Conan, follow these steps:</p> <ol> <li> <p>Create a <code>conanfile.txt</code> in your project root with the following content:</p> <pre><code>[requires]\nscl-machine/&lt;version&gt;\n</code></pre> </li> <li> <p>Install pipx first using guide: https://pipx.pypa.io/stable/installation/.</p> </li> <li> <p>Install Conan if not already installed:</p> <pre><code>pipx install conan\npipx ensurepath\n</code></pre> </li> <li> <p>Update CMake to 3.24:</p> <pre><code>pipx install cmake\npipx ensurepath\n</code></pre> </li> <li> <p>Relaunch your shell after installation.</p> <pre><code>exec $SHELL\n</code></pre> </li> <li> <p>Add the OSTIS-AI remote Conan repository:</p> <pre><code>conan remote add ostis-ai https://conan.ostis.net/artifactory/api/conan/ostis-ai-library\n</code></pre> </li> <li> <p>Install scl-machine and its dependencies:</p> <pre><code>conan install . --build=missing\n</code></pre> </li> <li> <p>Import scl-machine targets into your CMake project by using:</p> <pre><code>find_package(scl-machine REQUIRED)\n</code></pre> </li> <li> <p>Link <code>scl-machine::inference</code> target to your target:</p> <pre><code>target_link_libraries(my-module\n    LINK_PUBLIC scl-machine::inference\n)\n</code></pre> </li> <li> <p>Go to problem solver documentation to learn how to use scl-machine agents.</p> </li> </ol> <p>In case you want to make changes to the project sources, please refer to the build system docs.</p>"},{"location":"build/build_system/","title":"Build System","text":"<p>The scl-machine build system is based on the principles of the sc-machine build system. To learn more about them, read sc-machine build system documentation.</p>"},{"location":"build/build_system/#compilation-steps","title":"Compilation steps","text":"<p>This project uses CMake presets. These presets help manage different build configurations, making it easier to work with dependencies and streamline the build process.</p> <p>If you wish to use CLI instead, you can list all the available configurations in the <code>CMakePresets.json</code> file and pick one of the presets:</p> <pre><code>conan install . -s build_type=&lt;Debug|Release&gt; --build=missing\ncmake --list-presets\n</code></pre>"},{"location":"build/build_system/#configure-presets","title":"Configure presets","text":"<p>Configure presets define how the project is configured before building. They specify various settings, including whether to include tests and which dependencies to use.</p> Name Display Name Description Build location <code>debug-conan</code> Debug config (Conan) Debug config with tests (Conan dependencies used) build/Debug <code>release-conan</code> Release config (Conan) Release config (Conan dependencies used) build/Release <code>release-with-tests-conan</code> Release config with tests (Conan) Release config with tests (Conan dependencies used) build/Release"},{"location":"build/build_system/#build-presets","title":"Build presets","text":"<p>Build presets link to the configure presets and specify how to build the project. They determine the output directories based on the selected configuration.</p> Name Configure Preset Build location <code>debug</code> <code>debug-conan</code> build/Debug <code>release</code> <code>release-conan</code>, <code>release-with-tests-conan</code> build/Release"},{"location":"build/build_system/#recommendations","title":"Recommendations","text":"<ul> <li>For development and debugging, use the Debug config (Conan) (<code>debug-conan</code>) preset. This configuration includes options for testing and benchmarking.</li> <li>For production builds, choose the Release config (Conan) (<code>release-conan</code>) preset to create optimized builds without debugging information.</li> <li>If you need to run tests in a production build, select the Release config with tests (Conan) (<code>release-with-tests-conan</code>) preset.</li> </ul>"},{"location":"build/build_system/#example-usage","title":"Example usage","text":"<p>To build your project using these presets, you can use the following commands:</p> <pre><code># Use pipx to install Conan if not already installed\npipx install conan\n</code></pre> <pre><code># Install dependencies using Conan with Debug build type\nconan install . -s build_type=Debug --build=missing\n# Configure using debug-conan preset\ncmake --preset debug-conan\n# Build using debug preset\ncmake --build --preset debug\n</code></pre> <p>To build your project for release, you can build with tests to ensure everything works as expected:</p> <pre><code># Install dependencies using Conan with Debug build type\nconan install . -s build_type=Release --build=missing\n# Configure using release-with-tests preset\ncmake --preset release-with-tests-conan\n# Build using release preset\ncmake --build --preset release\n</code></pre> <p>We also define <code>INSTALL</code> instructions in our CMake. This routine can be launched by appending <code>--target install</code> to the <code>cmake --build --preset &lt;preset&gt;</code> command. The result of this command will reside in <code>build/&lt;Release|Debug&gt;/install</code> (our default install folder). Install folder is basically a pack of portable executable files and shared libraries required to get scl-machine up and running, this command is intended to create clutter-free archives/folders with our code which you can then use in your own projects.</p>"},{"location":"build/cmake_flags/","title":"CMake Flags","text":""},{"location":"build/cmake_flags/#build-cache","title":"Build cache","text":"<p>This project uses ccache automatically if it's available in the system. To disable this, use flag <code>-DAUTO_CCACHE=OFF</code>.</p>"},{"location":"build/cmake_flags/#building-tests","title":"Building tests","text":"<pre><code>cmake --preset &lt;configure-preset&gt; -DSC_BUILD_TESTS=ON\ncmake --build --preset &lt;build-preset&gt;\n</code></pre>"},{"location":"build/cmake_flags/#code-formatting-with-clangformat","title":"Code formatting with CLangFormat","text":"<p>To check code with CLangFormat run: <pre><code>cmake --preset release-with-tests-conan -DSC_CLANG_FORMAT_CODE=ON\ncmake --build --preset release --target clangformat_check\n</code></pre></p> <p>or <pre><code>./scripts/clang/check_formatting.sh\n</code></pre></p> <p>To format code with CLangFormat run: <pre><code>cmake --preset release-with-tests-conan -DSC_CLANG_FORMAT_CODE=ON\ncmake --build --preset release --target clangformat\n</code></pre></p> <p>or <pre><code>./scripts/clang/format_code.sh\n</code></pre></p>"},{"location":"build/quick_start/","title":"Quick Start for Contributors","text":"<p>This guide provides short information for developers to start to work with scl-machine quickly. You can always learn more about the scl-machine's build system.</p>"},{"location":"build/quick_start/#install-project","title":"Install project","text":"<p>Install scl-machine via git:</p> <pre><code>git clone https://github.com/ostis-ai/scl-machine\ncd scl-machine\ngit submodule update --init --recursive\n</code></pre>"},{"location":"build/quick_start/#check-cmake","title":"Check CMake","text":"<p>Install pipx first using pipx installation guide if not already installed.</p> <p>Ensure you are using CMake version 3.24 or newer. Verify your version with:</p> <pre><code>cmake --version\n</code></pre> <p>To upgrade CMake, run:</p> <pre><code># Use pipx to install cmake if not already installed\npipx install cmake\npipx ensurepath\n# relaunch your shell after installation\nexec $SHELL\n</code></pre> <p>Install Ninja generator for CMake, to use sc-machine CMake presets:</p> <pre><code># Use pipx to install ninja if not already installed\npipx install ninja\npipx ensurepath\n# relaunch your shell after installation\nexec $SHELL\n</code></pre>"},{"location":"build/quick_start/#start-develop-scl-machine-with-conan","title":"Start develop scl-machine with Conan","text":""},{"location":"build/quick_start/#install-conan","title":"Install Conan","text":"<p>Install Conan, to build scl-machine dependencies with Conan-provided dependencies:</p> <pre><code># Use pipx to install conan if not already installed\npipx install conan\npipx ensurepath\n# relaunch your shell after installation\nexec $SHELL\n</code></pre>"},{"location":"build/quick_start/#add-conan-remote-repository","title":"Add Conan remote repository","text":"<p>Add Conan remote repository with the specified URL:</p> <pre><code>conan remote add ostis-ai https://conan.ostis.net/artifactory/api/conan/ostis-ai-library\n</code></pre>"},{"location":"build/quick_start/#use-scl-machine-in-debug","title":"Use scl-machine in Debug","text":""},{"location":"build/quick_start/#install-dependencies-with-conan","title":"Install dependencies with Conan","text":"<p>scl-machine is an extension to sc-machine, so sc-machine is main dependency for scl-machine. To install it, run in the root of the project:</p> <pre><code>conan install . -s build_type=Debug --build=missing\n</code></pre>"},{"location":"build/quick_start/#build-scl-machine-in-debug","title":"Build scl-machine in Debug","text":"<p>To build scl-machine in debug mode using Conan-provided dependencies, run:</p> <pre><code># debug build type\ncmake --preset debug-conan\ncmake --build --preset debug\n</code></pre> <p>Note</p> <p>By default, configure preset <code>debug</code> enables building scl-machine tests.</p>"},{"location":"build/quick_start/#run-scl-machine-tests-in-debug","title":"Run scl-machine tests in Debug","text":"<p>After that, you can go to <code>build/Debug</code> and run tests via <code>ctest</code>:</p> <pre><code>cd build/Debug\nctest -V\n</code></pre> <p>You can also check code formatting. To learn more, go to the CMake flags page.</p>"},{"location":"build/quick_start/#use-scl-machine-in-release","title":"Use scl-machine in Release","text":""},{"location":"build/quick_start/#install-dependencies-with-conan_1","title":"Install dependencies with Conan","text":"<p>To install it, run in the root of the project:</p> <pre><code>conan install . -s build_type=Release --build=missing\n</code></pre>"},{"location":"build/quick_start/#build-scl-machine-in-release","title":"Build scl-machine in Release","text":"<p>To build scl-machine in release mode using Conan-provided dependencies, run:</p> <pre><code># release build type without tests\ncmake --preset release-conan\ncmake --build --preset release\n</code></pre> <p>To build scl-machine with tests in release mode using Conan-provided dependencies, run:</p> <pre><code># release build type with tests\ncmake --preset release-with-tests-conan\ncmake --build --preset release\n</code></pre>"},{"location":"build/quick_start/#run-scl-machine-tests-in-release","title":"Run scl-machine tests in Release","text":"<p>After that, you can run tests:</p> <pre><code>cd build/Release\nctest -V\n</code></pre> <p>You can also check code formatting. To learn more, go to the CMake flags page.</p>"},{"location":"build/quick_start/#run-scl-machine","title":"Run scl-machine","text":"<p>Before launching scl-machine, extract sc-machine from GitHub Releases or build it.</p> <p>To launch scl-machine, run:</p> <pre><code>./path/to/sc-machine/binary -s path/to/kb.bin \\\n    -e \"path/to/scl-machine/lib/extensions;path/to/sc-machine/lib/extensions\"\n# if several paths to extensions are provided then they should be separated \n# by semicolon and wrapped in double quotes\n</code></pre>"}]}