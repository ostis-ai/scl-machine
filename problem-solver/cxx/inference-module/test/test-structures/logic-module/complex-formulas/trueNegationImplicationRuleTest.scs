sc_node_class
	-> action_direct_inference;
	-> atomic_logical_formula;
	-> concept_template_for_generation;
	-> class_not;
	-> target_node_class;
	-> current_node_class;
	-> class_1;
	-> class_2;;

sc_node_role_relation
	-> rrel_1;
	-> rrel_main_key_sc_element;;

sc_node_norole_relation
	-> nrel_implication;
	-> nrel_disjunction;
	-> nrel_conjunction;
	-> nrel_negation;;

test_direct_inference_target = [*
	@pair28 = (current_node_class _-> _x);;
	@pair29 = (target_node_class _-> _x);;
*];;

not = [*
    class_not _-> _res;;
    current_node_class _-> _res;;
*];;

then = [*
    current_node_class _-> _res;;
    target_node_class _-> _res;;
*];;

@p1 = (not_link => then);;
@p1 <- nrel_implication;;
@p2 = (inference_logic_test_rule -> @p1);;
@p2 <- rrel_main_key_sc_element;;
nrel_negation -> not_link;;
not_link -> not;;

inference_logic_test_rule <- statement;;

atomic_logical_formula
	-> not;
	-> then;;

concept_template_for_generation
	-> then;;

input_structure = [*
	argument <- current_node_class;;
	argument <- class_1;;
	fake_argument <- current_node_class;;
*];;

inference_logic_test_action
    <- action_direct_inference;
    -> rrel_1: test_direct_inference_target;
    -> rrel_2: rule_set;
    -> rrel_3: input_structure;
    -> rrel_4: output_structure;;

rule_set
    -> rrel_1: { inference_logic_test_rule };;
